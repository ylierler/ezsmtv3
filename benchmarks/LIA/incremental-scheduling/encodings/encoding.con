&dom{0..MT} = st(D,J) :- 
	device(D),
	job(J),
	job_device(J,D),
	max_value(MT).



&dom{0..MT} = start(J) :- 
	job(J),
	max_value(MT).

&sum{start(J)} = st(D,J) :-
	job(J),
	job_device(J,D).


%----------------------
% - overlap
%----------------------

:- on_instance(J1,I), on_instance(J2,I), J1 != J2,
   job_device(J1,D), job_device(J2,D),
   &sum{start(J1)} <= start(J2), job_len(J1,L1),
   &sum{start(J2); -L1} < start(J1).

%----------------------
%     - order
%----------------------

&sum{st(D2,J2); -L1} >= st(D1,J1) :-
	job(J1),
	job(J2),
	device(D),
	precedes(J1,J2),
	job_device(J1,D1),
	job_device(J2,D2),
	job_len(J1,L1).



%-------------------------------------
%     - completion -- total-tardiness
%-------------------------------------

&dom{0..MV} = td(J) :- 
	job(J),
	max_value(MV).



&sum{td(J)} = 0 :-
        &sum{st(D,J); Len; -Deadline} < 0,
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).
&sum{td(J); -st(D,J); -Len} = -Deadline :-
        not &sum{st(D,J); Len; -Deadline} < 0,
	job(J),
	device(D),
	job_device(J,D),
	deadline(J,Deadline),
	job_len(J,Len).


%-------------------------------------
%     - completion -- penalty
%-------------------------------------
&dom{0..MV} = penalty(J) :- 
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	max_value(MV).


&sum{ penalty(J); -td(J)*Weight} = 0  :-
	job(J),
	deadline(J,Deadline),	%% penalty is meaningful only if the job has a deadline
	importance(J,Weight).

&dom{0..MV} = tot_penalty :-
	max_value(MV).

&sum{penalty(J): job(J), deadline(J,Deadline)} = tot_penalty.

&sum{tot_penalty} <= K :-
	max_total_penalty(K).

%----------------------
%     - instance assignment
%----------------------
instance_of(D,1) :- device(D).
instance_of(D,I+1) :- device(D), instance_of(D,I), instances(D,N), I < N.

1 { on_instance(J,I) : instance_of(D,I) } 1 :- job(J), job_device(J,D).%, not checking_solution.


:-	on_instance(J1,I),
	on_instance(J2,I), 	
	device(D),
	instances(D,N), N > 1,
 	job(J1),
	job(J2),
	job_device(J1,D),
	job_device(J2,D),
	J1 != J2,
	job_len(J1,Len1),
	job_len(J2,Len2),
	not &sum{st(D,J2); -st(D,J1); -Len1 }>= 0,
	not &sum{st(D,J1); -st(D,J2); -Len2 }>= 0.

:- on_instance(J,N),
	device(D),
	job(J),
	job_device(J,D),
	offline_instance(D,N),
	must_schedule(J).


%----------------------
% - current schedule
%----------------------

already_started(J) :-
	curr_job_start(J,S),
	curr_time(CT),
	CT > S.

already_finished(J) :-
	curr_job_start(J,S),
	job_len(J,L),
	curr_time(CT),
	CT >= S + L.

must_schedule(J) :-
	job(J),
	not must_not_schedule(J).

must_not_schedule(J) :-
	already_started(J),
	not production_failed(J).

rescheduled(J) :-
	production_failed(J).

production_failed(J) :-
	already_started(J),
	not already_finished(J),
	job_device(J,D),
	curr_on_instance(J,I),
	offline_instance(D,I).

&sum{st(D,J)} >= CT :-
	device(D),
	job_device(J,D),
	curr_time(CT),
	must_schedule(J).

&sum{st(D,J)} = T :-
	job_device(J,D),
	curr_job_start(J,T),
	must_not_schedule(J).

:-  on_instance(J,I1), I1!= I,
	curr_on_instance(J,I),
	must_not_schedule(J).
